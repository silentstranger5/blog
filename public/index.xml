<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2025 00:00:08 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Json Parser</title>
      <link>http://localhost:1313/posts/json/json-parser/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:08 +0300</pubDate>
      <guid>http://localhost:1313/posts/json/json-parser/</guid>
      <description>&lt;p&gt;I am fairly familiar with JSON file format. It is used extensively for data exchange. If you have some level of experience with development, you are probably familiar with it as well. Among the benefits of JSON format:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It is easy to read and write&lt;/li&gt;&#xA;&lt;li&gt;It is easy to parse and construct&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I often hear that JSON is a quite simple format, and parsing it is not hard. In a recent series of posts, I already tackled parsing OBJ files. So, I became genuinely curious whether it&amp;rsquo;s possible to write a JSON parser from scratch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing Obj File Part 4</title>
      <link>http://localhost:1313/posts/obj/parsing-obj-file-part-4/</link>
      <pubDate>Wed, 29 Jan 2025 19:37:05 +0300</pubDate>
      <guid>http://localhost:1313/posts/obj/parsing-obj-file-part-4/</guid>
      <description>&lt;p&gt;In the previous post, we added face parsing to our parser. In this (hopefully) last part of the series, I&amp;rsquo;m going to add the last feature: parsing materials.&lt;/p&gt;&#xA;&lt;p&gt;Materials define various optical characteristics of the material that an object has. Materials are usually stored in a separate file. We need to define the keys of material files and corresponding values since the parsing algorithm will be pretty similar to that for &lt;code&gt;.obj&lt;/code&gt; files. This list is a bit longer, but hopefully, it&amp;rsquo;s still sortable by hand. Let&amp;rsquo;s define keys and place values:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing Obj File Part 3</title>
      <link>http://localhost:1313/posts/obj/parsing-obj-file-part-3/</link>
      <pubDate>Tue, 28 Jan 2025 20:02:37 +0300</pubDate>
      <guid>http://localhost:1313/posts/obj/parsing-obj-file-part-3/</guid>
      <description>&lt;p&gt;In the previous post, we created a core of the &lt;code&gt;.obj&lt;/code&gt; parser. It can handle keywords now, and store the data from a file. Today, I am going to handle &lt;em&gt;faces&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Faces represent a combination of vertices that comprise one facet of an object. Each face consists of &lt;em&gt;face vertices&lt;/em&gt; which are a triplet of indices that denote a position of the vertex, texture coordinate, and normal, in that order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing Obj File Part 2</title>
      <link>http://localhost:1313/posts/obj/parsing-obj-file-part-2/</link>
      <pubDate>Mon, 27 Jan 2025 13:05:06 +0300</pubDate>
      <guid>http://localhost:1313/posts/obj/parsing-obj-file-part-2/</guid>
      <description>&lt;p&gt;In this part of the series on parsing &lt;code&gt;.obj&lt;/code&gt; files, we are going to implement a part of the parser that will process keywords from the file. We will not cover faces and materials parsing yet, and we will cover it in later parts.&lt;/p&gt;&#xA;&lt;p&gt;In our previous post, I showed you a simple parser that can parse vertices. Now we will extend and modify it to handle other keys like &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;vn&lt;/code&gt;, and &lt;code&gt;vt&lt;/code&gt;. To do this we need to change our approach to searching keys.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing Obj File</title>
      <link>http://localhost:1313/posts/obj/parsing-obj-file/</link>
      <pubDate>Sun, 26 Jan 2025 20:32:35 +0300</pubDate>
      <guid>http://localhost:1313/posts/obj/parsing-obj-file/</guid>
      <description>&lt;h3 id=&#34;obj-files&#34;&gt;OBJ files&lt;/h3&gt;&#xA;&lt;p&gt;In this series of posts, I am going to write a parser for &lt;code&gt;.obj&lt;/code&gt; files. Those files are used to store data about 3d objects like vertex positions, normal vectors, texture coordinates, and material properties. This parser will be written iteratively, one step at a time. Why bother writing such a parser? You will learn:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to read text files&lt;/li&gt;&#xA;&lt;li&gt;How to process strings&lt;/li&gt;&#xA;&lt;li&gt;How to manage allocation and storage of data&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;And maybe something on top of this. This parser is not very complicated but requires a bit of code and a careful approach. An interleaved array that such a parser will produce can be used in projects that expect such data, like &lt;code&gt;OpenGL&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing an Algorithm Part 2</title>
      <link>http://localhost:1313/posts/sha256/writing-an-algorithm-part-2/</link>
      <pubDate>Sat, 25 Jan 2025 14:38:08 +0300</pubDate>
      <guid>http://localhost:1313/posts/sha256/writing-an-algorithm-part-2/</guid>
      <description>&lt;p&gt;In the previous post, we wrote a SHA256 implementation. More specifically, we prepared all of the things needed to use an algorithm, such as constants, functions, and data structures. In this part, we are going to implement an algorithm itself. &lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf&#34;&gt;Here&lt;/a&gt; is a document describing the algorithm specification.&lt;/p&gt;&#xA;&lt;p&gt;After all of the groundwork, let&amp;rsquo;s take a look at the algorithm:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;6.2 SHA-256&#xA;&#xA;SHA-256 may be used to hash a message, M, having a length of l bits, where 0 &amp;lt;= l &amp;lt; 2 ^ 64. The &#xA;algorithm uses 1) a message schedule of sixty-four 32-bit words, 2) eight working variables of 32 &#xA;bits each, and 3) a hash value of eight 32-bit words. The final result of SHA-256 is a 256-bit &#xA;message digest.&#xA;&#xA;The words of the message schedule are labeled W0, W1,â€¦, W63. The eight working variables are &#xA;labeled a, b, c, d, e, f, g, and h. The words of the hash value are labeled H0(i), H1(i), ..., H7(i), &#xA;which will hold the initial hash value, H(0), replaced by each successive intermediate hash value&#xA;(after each message block is processed), H(i), and ending with the final hash value, H(N). SHA-256 &#xA;also uses two temporary words, T1 and T2.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From the start, let&amp;rsquo;s declare all necessary variables that are going to be used in our algorithm:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing an Algorithm</title>
      <link>http://localhost:1313/posts/sha256/writing-an-algorithm/</link>
      <pubDate>Fri, 24 Jan 2025 19:02:29 +0300</pubDate>
      <guid>http://localhost:1313/posts/sha256/writing-an-algorithm/</guid>
      <description>&lt;h3 id=&#34;implementing-sha256-from-scratch&#34;&gt;Implementing SHA256 from scratch&lt;/h3&gt;&#xA;&lt;p&gt;In the last post, we used the &lt;a href=&#34;https://openssl.org&#34;&gt;OpenSSL&lt;/a&gt; library to implement the SHA256 message digest algorithm. There may be some cases, however, when you don&amp;rsquo;t want to use a library. For example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Notice that we are only using one part of the library&amp;rsquo;s vast functionality once. We probably won&amp;rsquo;t use it for other purposes in the future, not right now, at least. In this case, the overhead of building the entire library might not be worth it.&lt;/li&gt;&#xA;&lt;li&gt;Maybe you want to learn how to implement this algorithm yourself. In this case, you can get more insight and experience from implementing it rather than using a ready library.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Implementing the SHA256 algorithm from scratch sounds like quite a daunting task. It&amp;rsquo;s difficult to think about where to even start. However, such an algorithm is probably widely used and implemented in a variety of languages and platforms. Surely, there has to be &lt;em&gt;something&lt;/em&gt; about it somewhere.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using C Libraries</title>
      <link>http://localhost:1313/posts/sha256/using-c-libraries/</link>
      <pubDate>Wed, 22 Jan 2025 14:01:17 +0300</pubDate>
      <guid>http://localhost:1313/posts/sha256/using-c-libraries/</guid>
      <description>&lt;p&gt;In the previous post, I discussed C language and briefly introduced how to use it. To be honest, if you have programming experience already, chances are that you can use most of the C without issues. There may be some problems with pointers though. Maybe I&amp;rsquo;ll cover it the next time.&lt;/p&gt;&#xA;&lt;p&gt;When I described C, I said that it is a simple language in itself, although it can be tricky to use because there is not much included in the language. Indeed, if you compare it to modern languages, there are many features lacking. I&amp;rsquo;m not even talking about various containers and algorithms like lists, maps, or sets.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The C Programming Language</title>
      <link>http://localhost:1313/posts/the-c-programming-language/</link>
      <pubDate>Tue, 21 Jan 2025 13:18:53 +0300</pubDate>
      <guid>http://localhost:1313/posts/the-c-programming-language/</guid>
      <description>&lt;h3 id=&#34;c-language&#34;&gt;C Language&lt;/h3&gt;&#xA;&lt;p&gt;For some unknown reason, I often find myself drawn to C. It&amp;rsquo;s hard for me to tell exactly why&amp;hellip; Above all, I think that the most important reason is the simplicity of this language. It is fairly small and can be learned relatively fast. It is also very close to assembly with very close mapping between C code and assembly instructions.&lt;/p&gt;&#xA;&lt;p&gt;Do not be fooled by this simplicity, though, reader. Even if the language and standard library are pretty minimal and even if they are close enough to primitive instructions, this language is not simple to use.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypass Censorship</title>
      <link>http://localhost:1313/posts/bypass-censorship/</link>
      <pubDate>Mon, 20 Jan 2025 19:59:58 +0300</pubDate>
      <guid>http://localhost:1313/posts/bypass-censorship/</guid>
      <description>&lt;p&gt;Some places around the world are essentially cut off from the Internet. I am talking about countries like Russia and China. This isolation is often a combination of restricted access from both outside (due to sanctions) and inside (due to censorship). In most cases, the reasons for such isolation are political.&lt;/p&gt;&#xA;&lt;p&gt;I am not a politologist or sociologist, nor do I claim to be even remotely competent in such areas. As a citizen of such an isolated country, allow me to clarify that many (at least a significant part with a minimum of 30% of the population, especially those who live in big cities and have internet access) do not agree with political course of action. The rest of the people are either brainwashed by propaganda or completely indifferent and just trying to survive. In many cases, authorities are &amp;ldquo;elected&amp;rdquo; without consent, and the election is just for a show. Authorities use brute force and legal prosecution in order to suppress any opposition. Such terrorism is very effective in the oppression of the population. There is essentially nothing that can be done against unfair law that penalizes you with 10 years of prison or a gun near your head.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Host Your Blog</title>
      <link>http://localhost:1313/posts/host-your-blog/</link>
      <pubDate>Mon, 20 Jan 2025 18:34:20 +0300</pubDate>
      <guid>http://localhost:1313/posts/host-your-blog/</guid>
      <description>&lt;h3 id=&#34;website-hosting&#34;&gt;Website Hosting&lt;/h3&gt;&#xA;&lt;p&gt;We have successfully created a new website. That required some work, but it still was quite fast and easy (at least in my opinion). We have a problem, though. Nobody can see your website, other than you. When you type:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see what is called a &lt;em&gt;local&lt;/em&gt; version of your website. It means that it is accessible only on your computer (and maybe on your local network if you know your computer IP address). But the whole point of the website is to be visible to other people on the internet. What is the point of your website if nobody can see it?&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Make Your Blog</title>
      <link>http://localhost:1313/posts/how-to-make-your-blog/</link>
      <pubDate>Mon, 20 Jan 2025 16:06:51 +0300</pubDate>
      <guid>http://localhost:1313/posts/how-to-make-your-blog/</guid>
      <description>&lt;h3 id=&#34;website-constructors&#34;&gt;Website constructors&lt;/h3&gt;&#xA;&lt;p&gt;Do you want to create your blog? There are many possible ways to do that. The most popular and accessible ways are targeted for broad and general audiences. Here are some useful links:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wordpress.com&#34;&gt;WordPress&lt;/a&gt; is probably the oldest and the most popular website constructor. It has wide customization options.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wix.com&#34;&gt;Wix&lt;/a&gt; is a fresh solution targeted at a niche audience.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://medium.com&#34;&gt;Medium&lt;/a&gt; is another popular option. I&amp;rsquo;ve seen many blogs on this platform that discuss more business or technical topics.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;other-options&#34;&gt;Other Options&lt;/h3&gt;&#xA;&lt;p&gt;Of course, there some many other possible options and platforms that could help you create your blog. But I want to talk about some other options. What if you don&amp;rsquo;t want to use existing ready platforms, and want to try and create something else?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
